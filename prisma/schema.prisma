// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Lawyers {
  id        String   @id
  name      String
  username  String   @unique
  email     String   @unique
  password  String
  avatar    String?
  telephone String?
  createdAt DateTime
  updatedAt DateTime @updatedAt

  Cases         Cases[]
  CaseFiles     CaseFiles[]
  CaseLawyers   CaseLawyers[]
  Notifications Notifications[]

  invitesSent        Invites[]            @relation("InvitedBy")
  invitesReceived    Invites[]            @relation("Invited")
  Clients            Clients[]
  DocumentModel      DocumentModels[]
  DocumentModelFiles DocumentModelFiles[]
}

enum CaseType {
  ADMINISTRATIVE
  JUDICIAL
}

enum CaseStatus {
  IN_PROGRESS
  FINISHED
  CANCELED
  PAUSED
}

enum CasePriority {
  LOW
  MEDIUM
  HIGH
}

model Cases {
  id          String        @id
  createdById String
  createdBy   Lawyers       @relation(fields: [createdById], references: [id])
  title       String
  description String?
  priority    CasePriority
  type        CaseType
  status      CaseStatus
  isDeleted   Boolean
  createdAt   DateTime
  updatedAt   DateTime      @updatedAt
  CaseFiles   CaseFiles[]
  CaseLawyers CaseLawyers[]
  Invites     Invites[]
  CaseClients CaseClients[]
}

model CaseFiles {
  id           String   @id
  caseId       String
  case         Cases    @relation(fields: [caseId], references: [id])
  uploadedById String
  uploadedBy   Lawyers  @relation(fields: [uploadedById], references: [id])
  path         String   @unique
  fullpath     String   @unique
  mimetype     String
  originalname String
  size         Int
  createdAt    DateTime
}

model CaseLawyers {
  id        String   @id
  caseId    String
  case      Cases    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  lawyerId  String
  lawyer    Lawyers  @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  createdAt DateTime
}

model Notifications {
  id        String   @id
  lawyer    Lawyers  @relation(fields: [lawyerId], references: [id])
  lawyerId  String
  type      String
  message   String
  details   Json
  isRead    Boolean
  createdAt DateTime
}

model Invites {
  id          String    @id
  case        Cases     @relation(fields: [caseId], references: [id])
  caseId      String
  invited     Lawyers   @relation("Invited", fields: [invitedId], references: [id])
  invitedById String
  invitedBy   Lawyers   @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedId   String
  status      String
  createdAt   DateTime
  respondedAt DateTime?
}

model Clients {
  id          String        @id
  createdBy   Lawyers       @relation(fields: [createdById], references: [id])
  createdById String
  name        String
  email       String        @unique
  telephone   String
  birthDate   DateTime
  createdAt   DateTime
  updatedAt   DateTime
  CaseClients CaseClients[]
}

model Addresses {
  id           String   @id
  ownerId      String
  name         String
  postalCode   String
  country      String
  state        String
  city         String
  street       String
  neighborhood String
  number       String
  complement   String?
  createdAt    DateTime
  updatedAt    DateTime
}

model CaseClients {
  id        String   @id
  client    Clients  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  case      Cases    @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId    String
  createdAt DateTime
  clientId  String
}

model DocumentModels {
  id          String               @id
  ownerId     String
  lawyer      Lawyers              @relation(fields: [ownerId], references: [id])
  title       String
  description String?
  color       String
  createdAt   DateTime
  files       DocumentModelFiles[]
}

model DocumentModelFiles {
  id              String         @id
  documentModelId String
  documentModel   DocumentModels @relation(fields: [documentModelId], references: [id], onDelete: Cascade)
  uploadedById    String
  uploadedBy      Lawyers        @relation(fields: [uploadedById], references: [id])
  path            String         @unique
  fullpath        String         @unique
  mimetype        String
  originalname    String
  size            Int
  createdAt       DateTime
}
